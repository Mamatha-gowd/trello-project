{"ast":null,"code":"import { GET_CHECKITEMS, ADD_CHECKITEM, DELETE_CHECKITEM, UPDATE_CHECKITEM, UPDATE_STATE } from \"./actiontypes\";\nconst token = \"52615ebb3fb8336a474fd1ab9ec8ae053f5321433e1cbfefefb33a1779816ba9\";\nconst key = \"23fe0646c0d1253eb430f7e02db925a0\";\n\nconst getCheckitems = (checklistid, checkitems) => dispatch => {\n  dispatch({\n    type: GET_CHECKITEMS,\n    payload: {\n      checklistid,\n      checkitems\n    }\n  });\n};\n\nconst addCheckitem = (name, checklistid) => dispatch => {\n  let url = `https://api.trello.com/1/checklists/${checklistid}/checkItems?name=${name}&key=${key}&token=${token}`;\n  fetch(url, {\n    method: \"POST\"\n  }).then(res => res.json()).then(checkitem => {\n    dispatch({\n      type: ADD_CHECKITEM,\n      payload: {\n        checklistid,\n        checkitem\n      }\n    });\n  });\n};\n\nconst deleteCheckitem = (checklistid, checkitemid) => dispatch => {\n  let url = `https://api.trello.com/1/checklists/${checklistid}/checkItems/${checkitemid}?key=${key}&token=${token}`;\n  fetch(url, {\n    method: \"DELETE\"\n  }).then(res => dispatch({\n    type: DELETE_CHECKITEM,\n    payload: {\n      checklistid,\n      checkitemid\n    }\n  }));\n};\n\nconst updateCheckitem = (cardid, checkitemid, name) => dispatch => {\n  let url = `https://api.trello.com/1/cards/${cardid}/checkItem/${checkitemid}?name=${name}&key=${key}&token=${token}`;\n  fetch(url, {\n    method: \"PUT\"\n  }).then(res => res.json()).then(checkitem => {\n    dispatch({\n      type: UPDATE_CHECKITEM,\n      payload: {\n        checkitem,\n        checkitemid\n      }\n    });\n  });\n};\n\nconst updateState = (cardid, checkitemid, state) => dispatch => {\n  state === \"complete\" ? \"incomplete\" : \"complete\";\n  let url = `https://api.trello.com/1/cards/${cardid}/checkItem/${checkitemid}?state=${state}&key=${key}&token=${token}`;\n  fetch(url, {\n    method: \"PUT\"\n  }).then(res => res.json()).then(checkitem => {\n    dispatch({\n      type: UPDATE_STATE,\n      payload: {\n        checkitem,\n        checkitemid\n      }\n    });\n  });\n};\n\nexport { getCheckitems, addCheckitem, deleteCheckitem, updateCheckitem, updateState };","map":{"version":3,"sources":["/home/mamatha/react-redux/src/Actions/Checklistaction.js"],"names":["GET_CHECKITEMS","ADD_CHECKITEM","DELETE_CHECKITEM","UPDATE_CHECKITEM","UPDATE_STATE","token","key","getCheckitems","checklistid","checkitems","dispatch","type","payload","addCheckitem","name","url","fetch","method","then","res","json","checkitem","deleteCheckitem","checkitemid","updateCheckitem","cardid","updateState","state"],"mappings":"AAAA,SACEA,cADF,EAEEC,aAFF,EAGEC,gBAHF,EAIEC,gBAJF,EAKEC,YALF,QAMO,eANP;AAOA,MAAMC,KAAK,GACT,kEADF;AAEA,MAAMC,GAAG,GAAG,kCAAZ;;AAEA,MAAMC,aAAa,GAAG,CAACC,WAAD,EAAcC,UAAd,KAA8BC,QAAD,IAAc;AAC/DA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEX,cAAR;AAAwBY,IAAAA,OAAO,EAAE;AAAEJ,MAAAA,WAAF;AAAeC,MAAAA;AAAf;AAAjC,GAAD,CAAR;AACD,CAFD;;AAIA,MAAMI,YAAY,GAAG,CAACC,IAAD,EAAON,WAAP,KAAwBE,QAAD,IAAc;AACxD,MAAIK,GAAG,GAAI,uCAAsCP,WAAY,oBAAmBM,IAAK,QAAOR,GAAI,UAASD,KAAM,EAA/G;AACAW,EAAAA,KAAK,CAACD,GAAD,EAAM;AACTE,IAAAA,MAAM,EAAE;AADC,GAAN,CAAL,CAGGC,IAHH,CAGSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAHjB,EAIGF,IAJH,CAISG,SAAD,IAAe;AACnBX,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEV,aAAR;AAAuBW,MAAAA,OAAO,EAAE;AAAEJ,QAAAA,WAAF;AAAea,QAAAA;AAAf;AAAhC,KAAD,CAAR;AACD,GANH;AAOD,CATD;;AAWA,MAAMC,eAAe,GAAG,CAACd,WAAD,EAAce,WAAd,KAA+Bb,QAAD,IAAc;AAClE,MAAIK,GAAG,GAAI,uCAAsCP,WAAY,eAAce,WAAY,QAAOjB,GAAI,UAASD,KAAM,EAAjH;AACAW,EAAAA,KAAK,CAACD,GAAD,EAAM;AACTE,IAAAA,MAAM,EAAE;AADC,GAAN,CAAL,CAEGC,IAFH,CAESC,GAAD,IACNT,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAET,gBAAR;AAA0BU,IAAAA,OAAO,EAAE;AAAEJ,MAAAA,WAAF;AAAee,MAAAA;AAAf;AAAnC,GAAD,CAHV;AAKD,CAPD;;AASA,MAAMC,eAAe,GAAG,CAACC,MAAD,EAASF,WAAT,EAAsBT,IAAtB,KAAgCJ,QAAD,IAAc;AACnE,MAAIK,GAAG,GAAI,kCAAiCU,MAAO,cAAaF,WAAY,SAAQT,IAAK,QAAOR,GAAI,UAASD,KAAM,EAAnH;AACAW,EAAAA,KAAK,CAACD,GAAD,EAAM;AACTE,IAAAA,MAAM,EAAE;AADC,GAAN,CAAL,CAGGC,IAHH,CAGSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAHjB,EAIGF,IAJH,CAISG,SAAD,IAAe;AACnBX,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER,gBAAR;AAA0BS,MAAAA,OAAO,EAAE;AAAES,QAAAA,SAAF;AAAaE,QAAAA;AAAb;AAAnC,KAAD,CAAR;AACD,GANH;AAOD,CATD;;AAWA,MAAMG,WAAW,GAAG,CAACD,MAAD,EAASF,WAAT,EAAsBI,KAAtB,KAAiCjB,QAAD,IAAc;AAChEiB,EAAAA,KAAK,KAAK,UAAV,GAAuB,YAAvB,GAAsC,UAAtC;AACA,MAAIZ,GAAG,GAAI,kCAAiCU,MAAO,cAAaF,WAAY,UAASI,KAAM,QAAOrB,GAAI,UAASD,KAAM,EAArH;AACAW,EAAAA,KAAK,CAACD,GAAD,EAAM;AACTE,IAAAA,MAAM,EAAE;AADC,GAAN,CAAL,CAGGC,IAHH,CAGSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAHjB,EAIGF,IAJH,CAISG,SAAD,IAAe;AACnBX,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP,YAAR;AAAsBQ,MAAAA,OAAO,EAAE;AAAES,QAAAA,SAAF;AAAaE,QAAAA;AAAb;AAA/B,KAAD,CAAR;AACD,GANH;AAOD,CAVD;;AAYA,SACEhB,aADF,EAEEM,YAFF,EAGES,eAHF,EAIEE,eAJF,EAKEE,WALF","sourcesContent":["import {\n  GET_CHECKITEMS,\n  ADD_CHECKITEM,\n  DELETE_CHECKITEM,\n  UPDATE_CHECKITEM,\n  UPDATE_STATE,\n} from \"./actiontypes\";\nconst token =\n  \"52615ebb3fb8336a474fd1ab9ec8ae053f5321433e1cbfefefb33a1779816ba9\";\nconst key = \"23fe0646c0d1253eb430f7e02db925a0\";\n\nconst getCheckitems = (checklistid, checkitems) => (dispatch) => {\n  dispatch({ type: GET_CHECKITEMS, payload: { checklistid, checkitems } });\n};\n\nconst addCheckitem = (name, checklistid) => (dispatch) => {\n  let url = `https://api.trello.com/1/checklists/${checklistid}/checkItems?name=${name}&key=${key}&token=${token}`;\n  fetch(url, {\n    method: \"POST\",\n  })\n    .then((res) => res.json())\n    .then((checkitem) => {\n      dispatch({ type: ADD_CHECKITEM, payload: { checklistid, checkitem } });\n    });\n};\n\nconst deleteCheckitem = (checklistid, checkitemid) => (dispatch) => {\n  let url = `https://api.trello.com/1/checklists/${checklistid}/checkItems/${checkitemid}?key=${key}&token=${token}`;\n  fetch(url, {\n    method: \"DELETE\",\n  }).then((res) =>\n    dispatch({ type: DELETE_CHECKITEM, payload: { checklistid, checkitemid } })\n  );\n};\n\nconst updateCheckitem = (cardid, checkitemid, name) => (dispatch) => {\n  let url = `https://api.trello.com/1/cards/${cardid}/checkItem/${checkitemid}?name=${name}&key=${key}&token=${token}`;\n  fetch(url, {\n    method: \"PUT\",\n  })\n    .then((res) => res.json())\n    .then((checkitem) => {\n      dispatch({ type: UPDATE_CHECKITEM, payload: { checkitem, checkitemid } });\n    });\n};\n\nconst updateState = (cardid, checkitemid, state) => (dispatch) => {\n  state === \"complete\" ? \"incomplete\" : \"complete\";\n  let url = `https://api.trello.com/1/cards/${cardid}/checkItem/${checkitemid}?state=${state}&key=${key}&token=${token}`;\n  fetch(url, {\n    method: \"PUT\",\n  })\n    .then((res) => res.json())\n    .then((checkitem) => {\n      dispatch({ type: UPDATE_STATE, payload: { checkitem, checkitemid } });\n    });\n};\n\nexport {\n  getCheckitems,\n  addCheckitem,\n  deleteCheckitem,\n  updateCheckitem,\n  updateState,\n};\n"]},"metadata":{},"sourceType":"module"}